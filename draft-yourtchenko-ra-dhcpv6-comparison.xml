<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC1149 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1149.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> <!-- used by XSLT processors -->
<!-- OPTIONS, known as processing instructions (PIs) go here. -->
<!-- For a complete list and description of PIs,
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable PIs that most I-Ds might want to use. -->
<?rfc strict="yes" ?> <!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC): -->
<?rfc toc="yes"?> <!-- generate a ToC -->
<?rfc tocdepth="2"?> <!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references: -->
<?rfc symrefs="yes"?> <!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?> <!-- sort the reference entries alphabetically -->
<!-- control vertical white space: 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?> <!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?> <!-- keep one blank line between list items -->
<!-- end of popular PIs -->
<rfc  category="info" docName="draft-yourtchenko-ra-dhcpv6-comparison-00" ipr="trust200902">
  <front>
    <title abbrev="RA and DHCPv6 comparison">A comparison between the DHCPv6  and RA based host configuration</title>
    <author fullname="Andrew Yourtchenko" initials="A" surname="Yourtchenko">
      <organization>Cisco</organization>
      <address>
        <postal>
      <street>7a de Kleetlaan</street>
      <city>Diegem</city>
<!-- <region/> -->
      <code>1830</code>
      <country>Belgium</country>
        </postal>
      <phone>+32 2 704 5494</phone>
<!-- <facsimile/> -->
      <email>ayourtch@cisco.com</email>
<!-- <uri/> -->
      </address>
    </author>
    <date year="2013" />
<!-- <area/> -->
<!-- <workgroup/> -->
      <keyword>ra, dhcpv6</keyword>
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
    <abstract>
      <t>
This document attempts to make a balanced comparison between the RA-based and DHCPv6-based host configuration mechanisms. 
It compares the two on different aspects, e.g: underlying media assumptions, coordination, locality, etc. 
and highlights the strong and weak sides of both protocols for each scenario.
      </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>
IPv4 provided only one way of configuring the addresses and node parameters: DHCP. Having no choice made the choice simple.
      </t>
      <t>
IPv6 allows for a similar mode of operation with DHCPv6, but also introduces the mandatory Router Advertisements, which
overlap in some functionality with DHCPv6 and replace some functionality of DHCPv4.
This creates the problem: what is the best? How do I know which of the two to use? Since "the best" 
usually means "the best for me", it is an inherently locally-significant adjective. A lot of arguments are
not taking this into account, resulting in deadlock situations and mutual frustrations during the discussion.
The goal of this document is dissecting the technical properties of both address configuration mechanisms.
This should hopefully result in a more objective and technical analysis, and allow for a better judgement
of which mechanism is "better" in each specific case.
      </t>
      <t>
The author of the document does not take any side nor tries to promote one approach over the other. 
If you, the reader, spot any instance where this is not the case, please inform the author so this 
could be corrected.
      </t>
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
        this document are to be interpreted as described in
        <xref target="RFC2119"/>.
      </t>
    </section>
    <section anchor="Comparison" title="Comparison">
      <section anchor="AsymmStd" title="Asymmetric standards requirements">
	<t>
Not all standards reference RA/DHCP equally - e.g. on 3G/LTE the standard
requires the use of SLAAC (thus, RA).
	</t>
	<t>
RFC 6434 in section 5.9.2 "IPv6 Stateless Address Autoconfiguration" defines
SLAAC a MUST, while DHCPv6 is defined as SHOULD by sections 7.2.1, 
"Other Configuration Information", and section 5.9.5, "Stateful Address
Autoconfiguration (DHCPv6)".
	</t>
      </section>
      <section anchor="AckNoAck" title="Acknowledged vs. Unacknowledged">
        <t>
DHCPv6 needs at least 2 packets (If Rapid Commit is being used. If it is not used, then 4 packets). 
RA can potentially work with just one packet - however the operation of it will be not optimal.
	</t>
	<t>
RA strength: it is quicker. 
<!-- FIXME: talk about the ORO somewhere here ? -->
	</t>
	<t>
DHCPv6 Plus: works well in the noisy/lossy environments; DHCPv6 minus: takes at least 1 RTT to the server. 
	</t>
	<t>
There is one additional reason for DHCPv6 to be slower. RFC3315 states: "A client MUST collect Advertise messages for the first RT seconds,
unless it receives an Advertise message with a preference value of 255.". Since most of the time the preference in DHCPv6 messages is not 255,
compliant nodes will be at least 1 second (+/- up to 0.1 sec) slower than those using RA - as RT is calculated based on SOL_TIMEOUT value.
        </t>
      </section>
      <section anchor="ClientOrServerInitiated" title="Client initiated vs. server initiated">
        <t>
Despite the division above, RA can be client-initiated, to some extent, 
with RS, and DHCPv6 can be server-initiated, to some extent, with "Reconfigure" messages.
	</t>
	<t>
If we treat these as "nudge" messages, the behavior of the sending and receiving parties is similar - the "nudge" message causes the orderly protocol exchange to
occur before the due time.
	</t>
	<t>
The part that is different, though, is that RA, due to its "send once, receive many" nature, can aggregate the "nudge" messages, so intuitively seems best for a
scenario with a very large number of the hosts, as it should have self-stabilizing properties compared to DHCPv6.
	</t>
	<t>
This "self-stabilizing" property intuitively seems to make RA safer to use, IFF it is used in purely "multicast" fashion.
However, the L2 media interaction concerns might affect and even cancel out this property, depending on the environment.
        </t>
      </section>
      <section anchor="CentralCoordVsDistrib" title="Centralized coordination vs. distributed coordination">
        <t>
RA, due to its "send once, receive many" nature, in its pure form necessarily 
can not dictate a per-client settings, but rather can only advise the domain the client
would pick from (SLAAC).
	</t>
	<t>
DHCPv6 on the other hand, due to its p2p nature is by default well suited 
for individual per-client tweaking.
	</t>
	<t>
The distributed nature can be a blessing if you do not care about 
who gets which address and a curse if you need to strictly account everyone.
	</t>
	<t>
NB: address assignment does not mean that the hosts will always use those 
addresses - e.g. it's perfectly possible to statically configure a different address, but
we only talk about homogenous standards-compliant well-behaved hosts for simplicity sake).
	</t>
	<t>
That's why the title of this section does not use the word "control" but rather uses the word "coordination". 
        </t>
      </section>
      <section anchor="SingleSourceOfTruth" title="Single Source of Truth vs. Multiple sources">
	<t>
The DHCPv6 model requires the client to choose only one of the advertise messages that it receives. When using 
RA, the client can combine information from multiple sources.
	</t>
	<t>
RA based configuration gives hosts a lot of flexibility.
	</t>
	<t>
On the other hand, DHCPv6 aims to tightly control the behavior
of the hosts and have a highly predictable configuration of the network as a whole. 
	</t>
	<t>
An example where this difference might be crucial is a segment with two routers, aware of each other's state.
If server A goes down, then server B, when using RA-based mechanism, can just send a message with a lifetime of zero.
The DHCPv6-based implementation of this scenario would need to be more involved - if the client trusted the server A
to begin with, it will not listen to notifications from B - so B will need to spoof A in some way.
	</t>
	<t>
However, at the same time this ease with which one device can instruct the hosts on behalf of the other can be also
considered a weakness in a stricter environment - and require additional security measures in place so that a malicious
host do not impersonate a router.
	</t>
      </section>
      <section anchor="ServerSideState" title="The amount of server-side state">
	<t>
RA in its pure form is inherently stateless - there is no per-client information stored on the sending router. 
This eases things like redundancy and failover compared to DHCPv6.
	</t>
	<t>
DHCPv6 in its stateless incarnation also does not keep the state - 
however, in the scenario of the DHCPv6 server sending the RECONFIGURE message to the client,
a DHCPv6 server must keep some knowledge of the client - which means it might need to keep some state. 
Thus if there is a requirement to keep the ability for the DHCPv6 server infrastructure to retain the ability of sending the RECONFIGURE message, this state needs to be kept across the server crashes and reboots.
	</t>
	<t>
FIXME: Further experimentation needed to test how it actually works in real life implementations.
        </t>
	<t>
Also, stateless DHCPv6 can not assign addresses to hosts.
        </t>
	<t>
jinmei@wide.ad.jp:

If you mean the Delayed Authentication Protocol by DHCPv6
authentication, the WIDE DHCPv6 supports it:
http://sourceforge.net/projects/wide-dhcpv6/
although I myself have only used it in testing.  I heard some other
vendors implemented it, too.

(And, for that matter, it also supports the Information Refresh Time
option (RFC4242)).

	</t>
      </section>
      <section anchor="Routing" title="Involvement or not into routing">
	<t>
RAs have to be sent out by the routers themselves.
This makes them more robust to misconfiguration: 
in DHCP, if server is several hops away it will not know what
routers are on the link - requiring manual entry and potential mistakes.
It is true that this does not seem to happen often in IPv4, but we can
assume it is the case because a typo results in an immediate hard failure
which gets fixed very quick. Fate sharing avoids this problem entirely.
	</t>
	<t>
To a large extent, RAs share fate with the routers that send them; for example, if a router loses power, then it will stop sending RAs. 
It's true that we address this in IPv4, by using protocols like VRRP.
	</t>
      </section>
      <section anchor="ServerLocality" title="Server locality">
        <t>
Both DHCPv6 and RA are inherently link-local mechanisms, 
however DHCPv6 has a means to "jump" over multiple hops by 
use of relays. This means RA *has* to be
distributed, while DHCPv6 can be both centralized and distributed. 
Frequently it is made centralized because of other benefits that 
centralized administration brings, but almost any router today 
can run a DHCPv6 server itself with very little problems.
        </t>
      </section>
      <section anchor="Programming" title="Programming: UDP vs. ICMP">
        <t>
The programming difficulty is a somewhat subjective topic.
On one hand, one can say ICMP is harder to implement than UDP; it often requires raw sockets or
kernel collaboration (e.g., on Linux RDNSS information can be read using
netlink. UDP is much simpler). On the other hand, stateful DHCPv6 can be arguably 
a more complicated protocol to implement than RAs, with more message types and so on.
        </t>
        <t>
On the other hand, it could be argued down to a choice of API:
writing programs handling RA options like RDNSS is no harder than
writing DHCPv6 client in terms of the socket API.  As long as the system
supports RFC3542 you should be able to write a portable RA "client"
pretty easily (meaning as easy/hard as writing some UDP client
program).  For example, FreeBSD's rtsold supports RDNSS and (AFAIK)
only relies on the RFC3542 APIs.  Also, since DHCP is trickier than
other UDP applications in some points (it's more sensitive to which
interface to use, and in some cases you need to make sure the source
address is link-local, etc), it's quite likely that you'll need
something like unusual APIs like RFC3542 or some non-portable system
dependent interface to write a standard-compliant DHCP(v6) client.  
So, overall, I'd say the programming difficulty regarding UDP (DHCP)
vs ICMP (RS/RA) is marginal.
        </t>
	<t>
In summary, it is probably fair to say that the "difficulty" in this context 
equates to "unfamiliarity" in some respects, and "protocol complexity" in others.
	</t>
      </section>
      <section anchor="AddrManagement" title="IPAM tools impact comparison">
	<t>
This is an indirect dependency, resulting in the centralized vs. distributed nature of DHCPv6 vs. RA. IPAM tools' integration with DHCP is fairly 
well understood for IPv4. When using RA, however, the IPAM can not track the addresses used. Of course, the larger subnet addressing space 
of IPv6 might in some cases transform the work performed by the IPAM systems from tracking the individual hosts towards tracking the subnets. However,
the host tracking needs to still be performed in some situations, and correlating the addresses with the hosts may be harder.
	</t>
	<t>
This said, until very recently DHCPv6 replaced the MAC address with DUID - which created its own set of challenges.
<!-- Maybe a reference here? -->
	</t>
      </section>
      <section anchor="SecurityTools" title="Security tools impact comparison">
	<t>
From Brian Carpenter. For further discussion.
	</t>
      </section>
    </section>
    <section anchor="SingleProtocolArguments" title="Arguments for running only a single protocol">
      <t>
The "Comparison" section aims to highlight the various differences, and implicitly show the reasoning
to have two protocols implemented in the nodes. This section enumerates the reasons for a network
operator to strongly prefer having only one of these two protocols in operation on the network at any point in time.
      </t>
      <section anchor="Complexity" title="Support and Security Complexity">
	<t>
The requirement to run two protocols at the same time securely results in the need 
to snoop both of them - for effective source 
address validation. Some vendors are unable to handle both at once.
<!-- Yeah, some vendors suck, but is that the protocol's fault? ;-) -->
This means operators are very exposed to rogue RAs and
rogue DHCPv6 packets flying around networks.
	</t>
	<t>
FIXME: To discuss further with Nick / other operators. Basic protection should be doable with just a simple PACL - which should work at once for both protocols.
	</t>
      </section>
    </section>
    <section anchor="NetworkManagerDifferences" title="Differences between different types of network operators">
      <t>
Mostly placeholder, to capture the different requirements from various different network profiles (home-like zeroconf network, rural type network, university campus, enterprise, bank, ISP, etc.).
      </t>
    </section>
    <section anchor="Conclusion" title="Conclusion">
	<t>
This document has attempted to show that both DHCPv6 and RA based 
configuration mechanisms have their unique strengths and weaknesses, 
and each of them may be "the best" depending on the environment 
for a particular network.
        </t>
	<t>
Therefore host stacks which expect to maximize their chances of connectivity
when moving between different networks will achieve this best by implementing 
both mechanisms - else they might end up lacking essential configuration parameters 
if the network supplies those parameters using the mechanism that is not implemented.
        </t>
	<t>
Networks may adopt a similar approach of attempting to support both mechanisms 
at once, to try to accomodate the "single-minded" hosts - but doing so usually incurs
overhead, which should be evaluated by the network administrators.
	</t>

    </section>
    <section anchor="FurtherProtocolDevelopment" title="Musings on further protocol directions in IETF">
	<t>
FIXME: To discuss: do we define spheres of influence for SLAAC/RA and DHCPv6, with strictly 
limited overlap, or do we try to make them equipotent, with a shared
data model for their options ?
	</t>
    </section>
    <section anchor="Acknowledgements" title="Acknowledgements">
        <t>
Thanks to Ted Lemon for triggering the creation of this document.
        </t>
        <t>
Thanks to the following people who brought in text or ideas into the document: Bernie Volz, Brian Carpenter, Nick Hilliard, Brian Haberman, Lorenzo Colitti, Ted Lemon, Ray Hunter, Behcet Sarikaya.
        </t>
    </section>
    <section anchor="IANA" title="IANA Considerations">
        <t>
        </t>
        <t>
        </t>
    </section>
    <section anchor="Security" title="Security Considerations">
        <t>
        </t>
        <t>
        </t>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      &RFC2119;
    </references>
    <references title="Informative References">
      &RFC1149;
    </references>
  </back>
</rfc>
